{
  "hash": "07bdc5a59b8e216d89bed48a8eb36944",
  "result": {
    "markdown": "::: {.content-hidden}\n$$\n%%   To set indentation of paragraphs\n\\setlength{\\parindent}{0pt}\n\n\n\n\n\n\n%%%%%%%%%%  MACROS    %%%%%%%%%%%%%%\n\n\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\Rtwo}{\\mathbb{R}^2}\n\\newcommand{\\Rthree}{\\mathbb{R}^3}\n\\newcommand{\\C}{\\mathbb{C}}  \n\\newcommand{\\N}{\\mathbb{N}}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\n\n\n\n\\newcommand{\\e}{\\varepsilon}\n\\newcommand{\\g}{\\gamma}\n\n\n\n\\newcommand{\\closure}[2][2]{{}\\mkern#1mu \\overline{\\mkern-#1mu #2 \\mkern-#1mu}\\mkern#1mu {}}\n\n\n\n\n\\newcommand{\\Czero}{\\mathnormal{C}}\n\\newcommand{\\Cinf}{{\\mathnormal{C}}^{\\infty}}\n\\newcommand{\\Cinfcomp}{{\\mathnormal{C}}_0^{\\infty}}\n\\newcommand{\\Lone}{{\\mathnormal{L}}^1}\n\\newcommand{\\Loneloc}{{\\mathnormal{L}}_{loc}^1}\n\\newcommand{\\Ltwo}{{\\mathnormal{L}}^2}\n\\newcommand{\\Lp}{{\\mathnormal{L}}^p}\n\\newcommand{\\Linf}{{\\mathnormal{L}}^{\\infty}}\n\\newcommand{\\Woneone}{{\\mathnormal{W}}^{1,1}}\n\\newcommand{\\Wonetwo}{{\\mathnormal{W}}^{1,2}}\n\\newcommand{\\Wonep}{{\\mathnormal{W}}^{1,p}}\n\\newcommand{\\Woneinf}{{\\mathnormal{W}}^{1,\\infty}}\n\\newcommand{\\Wtwotwo}{{\\mathnormal{W}}^{2,2}}\n\\newcommand{\\Wktwo}{{\\mathnormal{W}}^{k,2}}\n\\newcommand{\\Wkp}{{\\mathnormal{W}}^{k,p}}\n\\newcommand{\\Lip}{\\mathnormal{Lip}}\n\n\n\n\n\\newcommand{\\scp}[2]{\\left\\langle #1,#2 \\right\\rangle} %prodotto scalare\n\\newcommand{\\abs}[1]{\\left| #1 \\right|}  %valore assoluto\n\\newcommand{\\norm}[1]{\\left\\| #1 \\right\\|} %norma\n\n\n\n\n\n\n\n\n\n$$\n:::\n\n\n# Welcome {.unnumbered}\n\nThese are the Lecture Notes of **Differential Geometry 600727** for T1 2023 at the University of Hull. I will follow these lecture notes during the course. If you have any question or find any typo, please email me at\n\n<div style=\"text-align: center;\">\n**[S.Fanzon@hull.ac.uk](mailto: S.Fanzon@hull.ac.uk)**\n</div>\n\nUp to date informations about the course and homework will be published on the course webpage\n\n\n<div style=\"text-align: center;\">\n**[silviofanzon.com/blog/2023/Differential-Geometry](https://www.silviofanzon.com/blog/2023/Differential-Geometry/)**\n</div>\n\n\nA **pdf** version of the notes is available to download on the top-right.\n\n\n\n\n## References {.unnumbered}\n\nWe will study curves and surfaces in $\\R^3$. The main textbook of the course is Pressley [@pressley]. Other useful references are the books by do Carmo [@do-carmo] and B채r [@bar]. I will assume some knowledge from Analysis and Linear Algebra. A good place to revise these topics are the books by Zorich [@zorich-1; @zorich-2]. \n\n\n## Visualization {.unnumbered} \n\nIt is important to visualize the geometrical objects and concepts we are \ngoing to talk about in this course. I will show basic Python code to plot curves and surfaces. This part of the course is **`not required`** for the final examination. If you want to have fun plotting with Pyhton, I recommend installation through [Anaconda](https://www.anaconda.com) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html). The actual coding can then be done through [Jupyter Notebook](https://jupyter.org). Good references for scientific Python programming are [@johansson;@KSB-Python].   \nIf you do not want to mess around with Python, do not despair. You can still visualize pretty much everything we will do in this course using the excellent online 3D grapher tool [CalcPlot3D](https://c3d.libretexts.org/CalcPlot3D/index.html). To understand how it works, please refer to the [help manual](https://c3d.libretexts.org/CalcPlot3D/CalcPlot3D-Help/front.html) or to the short [video introduction](https://c3d.libretexts.org/CalcPlot3D/CalcPlot3D-Help/section-1.html).\n\n\n::: {.callout-important}\nYou are not expected to purchase any of the above books. These lecture notes will cover 100% of the topics you are expected to known in order to excel in the final exam.\n:::\n\nfrom mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\n# Grab some example data and plot a basic wireframe.\nX, Y, Z = axes3d.get_test_data(0.05)\nax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n# Set the axis labels\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\n# Rotate the axes and update\nfor angle in range(0, 360*4 + 1):\n    # Normalize the angle to the range [-180, 180] for display\n    angle_norm = (angle + 180) % 360 - 180\n\n    # Cycle through a full rotation of elevation, then azimuth, roll, and all\n    elev = azim = roll = 0\n    if angle <= 360:\n        elev = angle_norm\n    elif angle <= 360*2:\n        azim = angle_norm\n    elif angle <= 360*3:\n        roll = angle_norm\n    else:\n        elev = azim = roll = angle_norm\n\n    # Update the axis view and title\n    ax.view_init(elev, azim, roll)\n    plt.title('Elevation: %d째, Azimuth: %d째, Roll: %d째' % (elev, azim, roll))\n\n    plt.draw()\n    plt.pause(.001)\n    ```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}